-- 랜덤한 단어 10개 (똣도 랜덤 1개)
-- 단어 번호, 단어 이름, 뜻 이름 조회
SELECT * FROM
	(SELECT WORD_NO, WORD_NM, 
		(SELECT MEANING_NM FROM 
			(SELECT MEANING_NM
			FROM MEANING
			WHERE MEANING.WORD_NO = WORD.WORD_NO
			AND DELETE_FL = 'N'
			ORDER BY DBMS_RANDOM.VALUE)
		WHERE ROWNUM < 2) MEANING_NM
	FROM WORD 
	WHERE DELETE_FL = 'N'
	ORDER BY DBMS_RANDOM.VALUE)
WHERE ROWNUM < 11

-- 랜덤한 뜻 40개 가져오기
SELECT * 
FROM (SELECT MEANING_NM 
	FROM MEANING
	WHERE WORD_NO NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
	ORDER BY DBMS_RANDOM.VALUE)
WHERE ROWNUM<41;

-- 단어 기록 이미 등록 여부 확인



INSERT INTO WORD_RECODE (WORD_NO, MEMBER_NO) 
WITH CHECK_WORD AS (
	SELECT WORD_NO, 1 MEMBER_NO
	FROM WORD 
	WHERE WORD_NO IN (1, 21, 23, 24, 31))
SELECT WORD_NO, CHECK_WORD.MEMBER_NO
FROM WORD_RECODE
FULL JOIN CHECK_WORD USING(WORD_NO)
WHERE CHECK_WORD.MEMBER_NO = 1
AND ACCURATE_COUNT IS NULL;

ROLLBACK;
SELECT * FROM WORD_RECODE;

INSERT INTO WORD_RECODE (MEMBER_NO, WORD_NO) VALUES( 1, 3);
INSERT INTO WORD_RECODE (MEMBER_NO, WORD_NO) VALUES( 1, 21);
INSERT INTO WORD_RECODE (MEMBER_NO, WORD_NO) VALUES( 1, 23);

INSERT INTO WORD_RECODE (RECODE_NO, MEMBER_NO, WORD_NO) VALUES(SEQ_WORD_RECODE_PK.NEXTVAL, 2, 3);
INSERT INTO WORD_RECODE (RECODE_NO, MEMBER_NO, WORD_NO) VALUES(SEQ_WORD_RECODE_PK.NEXTVAL, 2, 21);
INSERT INTO WORD_RECODE (RECODE_NO, MEMBER_NO, WORD_NO) VALUES(SEQ_WORD_RECODE_PK.NEXTVAL, 2, 23);


UPDATE 


WITH CHECK_WORD AS (
	SELECT WORD_NO
	FROM WORD 
	WHERE WORD_NO IN (1, 21, 23, 24, 31))
SELECT * 
FROM WORD_RECODE
RIGHT JOIN CHECK_WORD USING(WORD_NO)
WHERE MEMBER_NO = 1;

UPDATE WORD_RECODE SET
ACCURATE_COUNT = ACCURATE_COUNT + 1
WHERE MEMBER_NO = 1
AND WORD_NO IN (3, 21, 23, 31);


SELECT * FROM WORD_RECODE;

-- 다음 시험 번호 가져오기
SELECT SEQ_TEST_RECODE_PK.NEXTVAL FROM DUAL;

SELECT * FROM TEST_RECODE;

INSERT INTO TEST_RECODE (TEST_NO, TEST_SCORE, MEMBER_NO)
VALUES(1, 30, 2);


-- 문제 등록
INSERT INTO QUSETION (WORD_NO, TEST_NO, EXAMPLE, CORRECT_ANSWER, USER_ANSWER)
VALUES(?, ?, ?, ?, ?)

-- 첫 기록 검사
SELECT COUNT(*) FROM WORD_RECODE WHERE MEMBER_NO = 1;

-- 단어 기록 카운트 증가
SELECT * FROM WORD_RECODE WHERE member_no = 1;

UPDATE WORD_RECODE SET
ACCURATE_COUNT = ACCURATE_COUNT + 1
WHERE WORD_NO ?
AND MEMBER_NO ?

DELETE FROM TEST_RECODE;
DELETE FROM QUESTION;
DELETE FROM WORD_RECODE;

SELECT * FROM TEST_RECODE;
SELECT * FROM QUESTION;

COMMIT;
ROLLBACK;

SELECT COUNT(*) "CHECK"
		FROM WORD_RECODE
		WHERE WORD_NO = 15
		AND MEMBER_NO = 1;
-- 시험 목록 조회
SELECT TEST_NO, TEST_SCORE, (SELECT MEMBER_NM FROM "MEMBER" WHERE "MEMBER".MEMBER_NO = TEST_RECODE.MEMBER_NO) MEMBER_NM,
	CASE 
		WHEN SYSDATE - TEST_DT < 1/24/60	-- 1분 미만인 경우
		THEN FLOOR((SYSDATE - TEST_DT) * 24 * 60 * 60) || '초 전'
		WHEN SYSDATE - TEST_DT < 1/24 -- 1시간 미만인 경우	
		THEN FLOOR((SYSDATE - TEST_DT) * 24 * 60) || '분 전'
		WHEN SYSDATE - TEST_DT < 1 -- 하루 미만인 경우	
		THEN FLOOR((SYSDATE - TEST_DT) * 24) || '시간 전'
		ELSE TO_CHAR(TEST_DT, 'YYYY-MM-DD')
	END TEST_DT
FROM TEST_RECODE
WHERE MEMBER_NO = 1;


SELECT TEST_NO, TEST_SCORE, (SELECT MEMBER_NM FROM "MEMBER" WHERE "MEMBER".MEMBER_NO = TEST_RECODE.MEMBER_NO) MEMBER_NM,
			CASE 
				WHEN SYSDATE - TEST_DT < 1/24/60	-- 1분 미만인 경우
				THEN FLOOR((SYSDATE - TEST_DT) * 24 * 60 * 60) || '초 전'
				WHEN SYSDATE - TEST_DT < 1/24 -- 1시간 미만인 경우	
				THEN FLOOR((SYSDATE - TEST_DT) * 24 * 60) || '분 전'
				WHEN SYSDATE - TEST_DT < 1 -- 하루 미만인 경우	
				THEN FLOOR((SYSDATE - TEST_DT) * 24) || '시간 전'
				ELSE TO_CHAR(TEST_DT, 'YYYY-MM-DD')
			END TEST_DT
		FROM TEST_RECODE
		WHERE MEMBER_NO = 1;
		
COMMIT;
SELECT * FROM MEMBER;

SELECT TEST_NO, TEST_SCORE, MEMBER_NO, EXAMPLE, CORRECT_ANSWER, USER_ANSWER, WORD_NO,
	(SELECT MEMBER_NM FROM "MEMBER" WHERE "MEMBER".MEMBER_NO = TEST_RECODE.MEMBER_NO) MEMBER_NM,
	(SELECT WORD_NM FROM WORD WHERE WORD.WORD_NO = QUESTION.WORD_NO) WORD_NM,	TO_CHAR(TEST_DT, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') TEST_DT	
FROM TEST_RECODE 
JOIN QUESTION USING(TEST_NO)
WHERE TEST_NO = 23;

SELECT COUNT(*) CONQUEST_COUNT WORD_RECODE
WHERE MEMBER_NO = ?
AND ACCURATE_COUNT > 1

SELECT * FROM MEMBER;

UPDATE "MEMBER" SET 
TIER_LEVEL = (SELECT TIER_LEVEL FROM TIER
	WHERE 5 BETWEEN MIN_COUNT AND MAX_COUNT)
WHERE MEMBER_NO = 1;


ROLLBACK;

SELECT * FROM MEMBER
JOIN TIER ON (1 BETWEEN TIER.MIN_COUNT)

SELECT TIER_LEVEL FROM TIER
WHERE 5 BETWEEN MIN_COUNT AND MAX_COUNT;

SELECT EMP_NAME, SALARY, S.SAL_LEVEL
FROM EMPLOYEE E
JOIN SAL_GRADE S ON (SALARY BETWEEN MIN_SAL AND MAX_SAL);
